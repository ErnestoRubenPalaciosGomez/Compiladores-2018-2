/* The following code was generated by JFlex 1.4.3 on 24/05/18 03:12 PM */

package com.mycompany.proyecto4;
import java.util.Stack;
import java.io.*;
import ast.patron.compuesto.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 24/05/18 03:12 PM from the specification file
 * <tt>C:/Users/Ernesto Palacios/Documents/NetBeansProjects/Proyecto4/src/main/resources/lex/Flexer.jflex</tt>
 */
public class AnalizadorLexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int INDENTA = 2;
  public static final int YYINITIAL = 0;
  public static final int DEINDENTA = 8;
  public static final int CODIGO = 6;
  public static final int CADENA = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\35\1\30\25\0\1\33\1\26\1\41\1\34\1\32\1\21"+
    "\2\0\1\27\1\27\1\22\1\21\1\0\1\21\1\1\1\23\1\2"+
    "\11\2\1\27\1\0\1\24\1\25\1\24\2\0\5\31\1\40\15\31"+
    "\1\36\6\31\1\0\1\0\2\0\1\31\1\0\1\3\2\31\1\5"+
    "\1\14\1\15\1\31\1\11\1\12\2\31\1\13\1\31\1\4\1\6"+
    "\1\20\1\31\1\16\1\17\1\7\1\37\1\31\1\10\3\31\57\0"+
    "\1\31\12\0\1\31\4\0\1\31\5\0\27\31\1\0\37\31\1\0"+
    "\u01ca\31\4\0\14\31\16\0\5\31\7\0\1\31\1\0\1\31\201\0"+
    "\5\31\1\0\2\31\2\0\4\31\10\0\1\31\1\0\3\31\1\0"+
    "\1\31\1\0\24\31\1\0\123\31\1\0\213\31\10\0\236\31\11\0"+
    "\46\31\2\0\1\31\7\0\47\31\110\0\33\31\5\0\3\31\55\0"+
    "\53\31\25\0\12\32\4\0\2\31\1\0\143\31\1\0\1\31\17\0"+
    "\2\31\7\0\2\31\12\32\3\31\2\0\1\31\20\0\1\31\1\0"+
    "\36\31\35\0\131\31\13\0\1\31\16\0\12\32\41\31\11\0\2\31"+
    "\4\0\1\31\5\0\26\31\4\0\1\31\11\0\1\31\3\0\1\31"+
    "\27\0\31\31\107\0\1\31\1\0\13\31\127\0\66\31\3\0\1\31"+
    "\22\0\1\31\7\0\12\31\4\0\12\32\1\0\7\31\1\0\7\31"+
    "\5\0\10\31\2\0\2\31\2\0\26\31\1\0\7\31\1\0\1\31"+
    "\3\0\4\31\3\0\1\31\20\0\1\31\15\0\2\31\1\0\3\31"+
    "\4\0\12\32\2\31\23\0\6\31\4\0\2\31\2\0\26\31\1\0"+
    "\7\31\1\0\2\31\1\0\2\31\1\0\2\31\37\0\4\31\1\0"+
    "\1\31\7\0\12\32\2\0\3\31\20\0\11\31\1\0\3\31\1\0"+
    "\26\31\1\0\7\31\1\0\2\31\1\0\5\31\3\0\1\31\22\0"+
    "\1\31\17\0\2\31\4\0\12\32\25\0\10\31\2\0\2\31\2\0"+
    "\26\31\1\0\7\31\1\0\2\31\1\0\5\31\3\0\1\31\36\0"+
    "\2\31\1\0\3\31\4\0\12\32\1\0\1\31\21\0\1\31\1\0"+
    "\6\31\3\0\3\31\1\0\4\31\3\0\2\31\1\0\1\31\1\0"+
    "\2\31\3\0\2\31\3\0\3\31\3\0\14\31\26\0\1\31\25\0"+
    "\12\32\25\0\10\31\1\0\3\31\1\0\27\31\1\0\12\31\1\0"+
    "\5\31\3\0\1\31\32\0\2\31\6\0\2\31\4\0\12\32\25\0"+
    "\10\31\1\0\3\31\1\0\27\31\1\0\12\31\1\0\5\31\3\0"+
    "\1\31\40\0\1\31\1\0\2\31\4\0\12\32\1\0\2\31\22\0"+
    "\10\31\1\0\3\31\1\0\51\31\2\0\1\31\20\0\1\31\21\0"+
    "\2\31\4\0\12\32\12\0\6\31\5\0\22\31\3\0\30\31\1\0"+
    "\11\31\1\0\1\31\2\0\7\31\72\0\60\31\1\0\2\31\14\0"+
    "\7\31\11\0\12\32\47\0\2\31\1\0\1\31\2\0\2\31\1\0"+
    "\1\31\2\0\1\31\6\0\4\31\1\0\7\31\1\0\3\31\1\0"+
    "\1\31\1\0\1\31\2\0\2\31\1\0\4\31\1\0\2\31\11\0"+
    "\1\31\2\0\5\31\1\0\1\31\11\0\12\32\2\0\4\31\40\0"+
    "\1\31\37\0\12\32\26\0\10\31\1\0\44\31\33\0\5\31\163\0"+
    "\53\31\24\0\1\31\12\32\6\0\6\31\4\0\4\31\3\0\1\31"+
    "\3\0\2\31\7\0\3\31\4\0\15\31\14\0\1\31\1\0\12\32"+
    "\6\0\46\31\1\0\1\31\5\0\1\31\2\0\53\31\1\0\u014d\31"+
    "\1\0\4\31\2\0\7\31\1\0\1\31\1\0\4\31\2\0\51\31"+
    "\1\0\4\31\2\0\41\31\1\0\4\31\2\0\7\31\1\0\1\31"+
    "\1\0\4\31\2\0\17\31\1\0\71\31\1\0\4\31\2\0\103\31"+
    "\45\0\20\31\20\0\125\31\14\0\u026c\31\2\0\21\31\1\0\32\31"+
    "\5\0\113\31\25\0\15\31\1\0\4\31\16\0\22\31\16\0\22\31"+
    "\16\0\15\31\1\0\3\31\17\0\64\31\43\0\1\31\4\0\1\31"+
    "\3\0\12\32\46\0\12\32\6\0\130\31\10\0\51\31\1\0\1\31"+
    "\5\0\106\31\12\0\35\31\51\0\12\32\36\31\2\0\5\31\13\0"+
    "\54\31\25\0\7\31\10\0\12\32\46\0\27\31\11\0\65\31\53\0"+
    "\12\32\6\0\12\32\15\0\1\31\135\0\57\31\21\0\7\31\4\0"+
    "\12\32\51\0\36\31\15\0\2\31\12\32\54\31\32\0\44\31\34\0"+
    "\12\32\3\0\3\31\12\32\44\31\153\0\4\31\1\0\4\31\3\0"+
    "\2\31\11\0\300\31\100\0\u0116\31\2\0\6\31\2\0\46\31\2\0"+
    "\6\31\2\0\10\31\1\0\1\31\1\0\1\31\1\0\1\31\1\0"+
    "\37\31\2\0\65\31\1\0\7\31\1\0\1\31\3\0\3\31\1\0"+
    "\7\31\3\0\4\31\2\0\6\31\4\0\15\31\5\0\3\31\1\0"+
    "\7\31\164\0\1\31\15\0\1\31\20\0\15\31\145\0\1\31\4\0"+
    "\1\31\2\0\12\31\1\0\1\31\3\0\5\31\6\0\1\31\1\0"+
    "\1\31\1\0\1\31\1\0\4\31\1\0\13\31\2\0\4\31\5\0"+
    "\5\31\4\0\1\31\64\0\2\31\u0a7b\0\57\31\1\0\57\31\1\0"+
    "\205\31\6\0\4\31\3\0\2\31\14\0\46\31\1\0\1\31\5\0"+
    "\1\31\2\0\70\31\7\0\1\31\20\0\27\31\11\0\7\31\1\0"+
    "\7\31\1\0\7\31\1\0\7\31\1\0\7\31\1\0\7\31\1\0"+
    "\7\31\1\0\7\31\120\0\1\31\u01d5\0\2\31\52\0\5\31\5\0"+
    "\2\31\4\0\126\31\6\0\3\31\1\0\132\31\1\0\4\31\5\0"+
    "\51\31\3\0\136\31\21\0\33\31\65\0\20\31\u0200\0\u19b6\31\112\0"+
    "\u51cd\31\63\0\u048d\31\103\0\56\31\2\0\u010d\31\3\0\20\31\12\32"+
    "\2\31\24\0\57\31\20\0\31\31\10\0\106\31\61\0\11\31\2\0"+
    "\147\31\2\0\4\31\1\0\4\31\14\0\13\31\115\0\12\31\1\0"+
    "\3\31\1\0\4\31\1\0\27\31\35\0\64\31\16\0\62\31\34\0"+
    "\12\32\30\0\6\31\3\0\1\31\4\0\12\32\34\31\12\0\27\31"+
    "\31\0\35\31\7\0\57\31\34\0\1\31\12\32\46\0\51\31\27\0"+
    "\3\31\1\0\10\31\4\0\12\32\6\0\27\31\3\0\1\31\5\0"+
    "\60\31\1\0\1\31\3\0\2\31\2\0\5\31\2\0\1\31\1\0"+
    "\1\31\30\0\3\31\2\0\13\31\7\0\3\31\14\0\6\31\2\0"+
    "\6\31\2\0\6\31\11\0\7\31\1\0\7\31\221\0\43\31\15\0"+
    "\12\32\6\0\u2ba4\31\14\0\27\31\4\0\61\31\u2104\0\u016e\31\2\0"+
    "\152\31\46\0\7\31\14\0\5\31\5\0\1\31\1\0\12\31\1\0"+
    "\15\31\1\0\5\31\1\0\1\31\1\0\2\31\1\0\2\31\1\0"+
    "\154\31\41\0\u016b\31\22\0\100\31\2\0\66\31\50\0\14\31\164\0"+
    "\5\31\1\0\207\31\23\0\12\32\7\0\32\31\6\0\32\31\13\0"+
    "\131\31\3\0\6\31\2\0\6\31\2\0\6\31\2\0\3\31\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\2\1\11\1\2\1\4\1\12\1\2"+
    "\1\13\11\14\4\15\1\2\1\16\1\17\1\4\1\2"+
    "\2\14\1\20\2\21\2\0\1\4\3\0\1\4\1\22"+
    "\2\14\1\23\12\14\1\24";

  private static int [] zzUnpackAction() {
    int [] result = new int[66];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\252\0\252\0\314"+
    "\0\356\0\u0110\0\252\0\252\0\u0110\0\u0110\0\u0132\0\u0132"+
    "\0\u0154\0\u0176\0\252\0\u0198\0\u01ba\0\u01dc\0\u01fe\0\u0220"+
    "\0\u0242\0\u0264\0\u0286\0\u02a8\0\u02ca\0\u02ec\0\252\0\u030e"+
    "\0\u0330\0\u0352\0\u0352\0\252\0\252\0\u0110\0\u0110\0\u0374"+
    "\0\u0396\0\252\0\252\0\u0110\0\u0110\0\u03b8\0\252\0\u0132"+
    "\0\u0154\0\u03da\0\u0132\0\u0198\0\u03fc\0\u041e\0\u0220\0\u0440"+
    "\0\u0462\0\u0484\0\u04a6\0\u04c8\0\u04ea\0\u050c\0\u052e\0\u0550"+
    "\0\u0572\0\u0220";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[66];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\30\6\1\7\2\6\1\10\1\11\1\12\4\6\30\13"+
    "\1\14\2\13\1\15\1\11\1\16\4\13\30\17\1\20"+
    "\2\17\1\21\1\22\1\21\3\17\1\23\1\7\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\30\1\32\1\30"+
    "\1\33\1\30\1\34\1\35\2\30\1\36\1\37\1\40"+
    "\1\41\2\42\1\43\1\44\1\45\1\30\1\7\1\46"+
    "\1\11\1\47\1\50\1\30\1\51\1\52\30\53\1\7"+
    "\2\53\1\54\1\11\1\54\4\53\75\0\1\10\1\11"+
    "\1\55\6\0\24\11\1\56\1\11\1\57\4\11\1\0"+
    "\3\11\34\0\1\55\1\11\1\55\4\0\41\60\1\23"+
    "\33\60\1\61\1\22\1\61\3\60\1\23\2\60\24\22"+
    "\1\62\1\22\1\63\4\22\1\60\3\22\1\23\2\0"+
    "\1\64\40\0\1\64\1\25\41\0\2\30\1\65\14\30"+
    "\10\0\1\30\4\0\3\30\3\0\4\30\1\66\12\30"+
    "\10\0\1\30\4\0\3\30\3\0\17\30\10\0\1\30"+
    "\4\0\3\30\3\0\14\30\1\67\2\30\10\0\1\30"+
    "\4\0\3\30\3\0\7\30\1\70\7\30\10\0\1\30"+
    "\4\0\3\30\3\0\13\30\1\67\3\30\10\0\1\30"+
    "\4\0\3\30\3\0\11\30\1\71\5\30\10\0\1\30"+
    "\4\0\3\30\3\0\4\30\1\31\12\30\10\0\1\30"+
    "\4\0\3\30\3\0\14\30\1\72\2\30\10\0\1\30"+
    "\4\0\3\30\23\0\1\37\42\0\1\37\43\0\1\37"+
    "\16\0\14\30\1\73\2\30\10\0\1\30\4\0\3\30"+
    "\3\0\1\30\1\74\15\30\10\0\1\30\4\0\3\30"+
    "\26\0\1\11\14\0\25\60\1\22\13\60\1\23\2\0"+
    "\3\30\1\67\13\30\10\0\1\30\4\0\3\30\3\0"+
    "\5\30\1\67\11\30\10\0\1\30\4\0\3\30\3\0"+
    "\10\30\1\75\6\30\10\0\1\30\4\0\3\30\3\0"+
    "\10\30\1\33\4\30\1\76\1\30\10\0\1\30\4\0"+
    "\3\30\3\0\10\30\1\77\6\30\10\0\1\30\4\0"+
    "\3\30\3\0\17\30\10\0\1\30\4\0\1\30\1\100"+
    "\1\30\3\0\11\30\1\101\5\30\10\0\1\30\4\0"+
    "\3\30\3\0\11\30\1\76\5\30\10\0\1\30\4\0"+
    "\3\30\3\0\12\30\1\67\4\30\10\0\1\30\4\0"+
    "\3\30\3\0\2\30\1\66\14\30\10\0\1\30\4\0"+
    "\3\30\3\0\12\30\1\102\4\30\10\0\1\30\4\0"+
    "\3\30\3\0\15\30\1\100\1\30\10\0\1\30\4\0"+
    "\3\30\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1428];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\2\11\3\1\2\11\6\1\1\11\13\1\1\11"+
    "\4\1\2\11\4\1\2\11\1\1\2\0\1\11\3\0"+
    "\20\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[66];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Parser yyparser;

  public AnalizadorLexico(java.io.Reader r, Parser yyparser) {
    this(r);
    this.yyparser = yyparser;
  }
    
    /* Acumula todos los átomos de DEINDENTA que deben ser devueltos  */
    static int dedents = 0;
    static int indents = 0;
    /* Estructura auxiliar para almacenar los bloques de indentación */
    static Stack<Integer> pila = new Stack<Integer>();
    /* Guarda el nivel actual de indentación */
    static Integer actual = 0;
    /** Función que maneja los niveles de indetación e imprime
    * átomos INDENTA y DEINDENTA.
    * @param int espacios - nivel de indetación actual.
    * @return boolean - true en caso que no haya errores léxicos,
    * 	      	      	 false en otro caso.
    */
    public void indentacion(int espacios){
        if(pila.empty()){ //ponerle un cero a la pila si esta vacia
             pila.push(new Integer(0));
        }

        Integer tope = pila.peek();

        if(tope != espacios){
	    //Se debe emitir un DEDENT por cada nivel mayor al actual
            if(tope > espacios){
                while(pila.peek() > espacios &&  pila.peek()!=0 ){
                   pila.pop();
                   dedents ++;
                }
                if(pila.peek() == espacios){
                   yybegin(DEINDENTA);
                }
                return;
            }
   	    //El nivel actual de indentación es mayor a los anteriores.
            pila.push(espacios);
            yybegin(CODIGO);
            indents = 1;
        }else yybegin(CODIGO);
    }

    public int VerificaPalabraReservada(String palabra){
        switch (palabra){
            case "and": return Parser.AND;
            case "or" : return Parser.OR;
            case "not": return Parser.NOT; 
            case "for": return Parser.FOR;
            case "while": return Parser.WHILE;
            case "if" : return Parser.IF;
            case "else": return Parser.ELSE;
            case "elif": return Parser.ELIF;
            case "print": return Parser.PRINT;
            default: return -3;

        }

    }

    public int VerificaOperador(String operador){
        switch(operador){
            case "+":
            case "-":
            case "*":
            case "/":
            case "=":
            case "%":
            case "<":
                return (int) yycharat(0);
            case "**":
                return Parser.POW;
            case "//":
                return Parser.DIVISION_ENTERA;
            case "<=":
                return Parser.MENOR_IGUAL;
            case ">=":
                return Parser.MAYOR_IGUAL;
            case "==":
                return Parser.IGUAL_IGUAL;
            case "!=":
                return Parser.DIFERENTE;
            default: return -4;
        }

    }
    //Funcion que verifica que la cadena este bien formada
    public void VerificaCadena(String cadena){
        String cadena_aux = cadena.substring(1, cadena.length()-1); // hace una subcadena que empieza en 1 al final de la linea
        if(cadena_aux.contains("\"") || cadena.contains("\\")){ // verifica si la cadena tiene comillas o tiene una diagonal
            System.out.print("Error: Cadena mal Formada en la linea " + (yyline+1)); // se le agrega mensaje de error a la salida 
            System.exit(0);
        }
    }

    public int line(){
        return yyline+1;
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AnalizadorLexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1700) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 13: 
          { return VerificaOperador(yytext());
          }
        case 21: break;
        case 10: 
          { VerificaCadena(yytext());
  					 yybegin(CODIGO); 
                                         yyparser.yylval = new CadenaHoja(yytext());
                                         return Parser.CADENA;
          }
        case 22: break;
        case 18: 
          { yyparser.yylval = new RealHoja(Double.parseDouble(yytext())); return Parser.REAL;
          }
        case 23: break;
        case 14: 
          { return (int) yycharat(0);
          }
        case 24: break;
        case 2: 
          { System.out.println("Error de sintáxis: caractér inválido: " + yytext() + "\nLínea "+ line());
					  System.exit(1);
          }
        case 25: break;
        case 19: 
          { return VerificaPalabraReservada(yytext());
          }
        case 26: break;
        case 8: 
          { actual += 4;
          }
        case 27: break;
        case 15: 
          { yybegin(INDENTA); actual=0; return Parser.SALTO;
          }
        case 28: break;
        case 6: 
          { actual = 0;
          }
        case 29: break;
        case 7: 
          { actual++;
          }
        case 30: break;
        case 12: 
          { yyparser.yylval = new IdentifierHoja(yytext()); return Parser.IDENTIFICADOR;
          }
        case 31: break;
        case 17: 
          { yypushback(1);
  					    if(dedents > 0){
						dedents--;
						return Parser.DEINDENTA;
  					    }
					    yybegin(CODIGO);
          }
        case 32: break;
        case 16: 
          { yybegin(CADENA);
          }
        case 33: break;
        case 11: 
          { yyparser.yylval = new IntHoja(Integer.parseInt(yytext())); return Parser.ENTERO;
          }
        case 34: break;
        case 3: 
          { System.out.println("Error de indentación. Línea " + line()); System.exit(1);
          }
        case 35: break;
        case 5: 
          { yypushback(1);
                                            this.indentacion(actual);
					    if(indents == 1){
					      indents = 0;
					      return Parser.INDENTA;
					    }
          }
        case 36: break;
        case 9: 
          { System.out.println("Cadena mal construida, linea " + line() ); System.exit(1);
          }
        case 37: break;
        case 1: 
          { yypushback(1); yybegin(CODIGO);
          }
        case 38: break;
        case 20: 
          { yyparser.yylval = new BooleanHoja(yytext().equals("True"));return Parser.BOOLEANO;
          }
        case 39: break;
        case 4: 
          { 
          }
        case 40: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                this.indentacion(0);
					    if(dedents > 0){
                                              dedents--;
					      return Parser.DEINDENTA;
					    }else{
                                                if(dedents == 0){
                                                   dedents--;
                                                   return Parser.SALTO;
                                                }else{
                                                   return 0;
                                                }                                     
				            }
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorLexico <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        AnalizadorLexico scanner = null;
        try {
          scanner = new AnalizadorLexico( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}

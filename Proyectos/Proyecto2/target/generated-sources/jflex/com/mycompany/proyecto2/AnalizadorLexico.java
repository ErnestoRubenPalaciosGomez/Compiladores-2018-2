/* The following code was generated by JFlex 1.4.3 on 24/04/18 11:22 PM */

package com.mycompany.proyecto2;
import java.util.Stack;
import java.io.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 24/04/18 11:22 PM from the specification file
 * <tt>C:/Users/Ernesto Palacios/Documents/NetBeansProjects/Proyecto2/src/main/resources/lex/Flexer.jflex</tt>
 */
public class AnalizadorLexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\44\1\43\25\0\1\44\1\41\1\22\1\45\1\0\1\34"+
    "\4\0\1\35\1\34\1\0\1\13\1\15\1\36\1\2\11\14\1\42"+
    "\1\0\1\37\1\40\1\37\2\0\4\1\1\16\1\7\7\1\1\17"+
    "\1\21\2\1\1\20\1\1\1\3\6\1\4\0\1\1\1\0\1\10"+
    "\2\1\1\24\1\6\1\27\1\1\1\31\1\32\2\1\1\11\1\1"+
    "\1\23\1\25\1\33\1\1\1\4\1\12\1\26\1\5\1\1\1\30"+
    "\3\1\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\4\3\1\5\1\4\1\2"+
    "\1\3\1\2\6\3\4\5\1\2\1\6\1\7\1\1"+
    "\1\2\4\3\1\0\1\10\1\3\1\0\1\11\1\3"+
    "\1\12\2\3\1\13\2\0\1\14\6\3\1\15\3\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[55];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\344\0\u010a"+
    "\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214\0\u023a"+
    "\0\u0260\0\u0286\0\u02ac\0\46\0\u02d2\0\u02f8\0\u031e\0\u031e"+
    "\0\46\0\u0344\0\u036a\0\u0390\0\u03b6\0\u03dc\0\u0402\0\u0428"+
    "\0\u017c\0\u017c\0\u044e\0\u01c8\0\46\0\u0474\0\114\0\u049a"+
    "\0\u04c0\0\46\0\u04e6\0\u0390\0\46\0\u050c\0\u0532\0\u0558"+
    "\0\u057e\0\u05a4\0\u05ca\0\114\0\u05f0\0\u0616\0\u063c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[55];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\3\1\6\1\7\1\10"+
    "\2\3\1\11\1\12\1\13\1\14\3\3\1\15\1\16"+
    "\1\3\1\17\1\3\1\20\1\21\1\3\1\22\1\23"+
    "\1\24\1\25\1\26\2\27\1\30\1\31\1\32\1\33"+
    "\1\34\47\0\12\3\1\0\1\3\1\0\4\3\1\0"+
    "\11\3\14\0\1\4\44\0\3\3\1\35\6\3\1\0"+
    "\1\3\1\0\4\3\1\0\11\3\13\0\10\3\1\36"+
    "\1\3\1\0\1\3\1\0\4\3\1\0\11\3\13\0"+
    "\7\3\1\37\2\3\1\0\1\3\1\0\4\3\1\0"+
    "\11\3\13\0\12\3\1\0\1\3\1\0\4\3\1\0"+
    "\1\40\10\3\26\0\1\12\1\41\32\0\1\12\11\0"+
    "\1\12\33\0\1\42\11\0\1\42\32\0\12\3\1\0"+
    "\1\3\1\0\1\3\1\43\2\3\1\0\11\3\12\0"+
    "\22\44\1\45\23\44\1\0\12\3\1\0\1\3\1\0"+
    "\4\3\1\0\2\3\1\46\6\3\13\0\3\3\1\47"+
    "\6\3\1\0\1\3\1\0\4\3\1\0\11\3\13\0"+
    "\12\3\1\0\1\3\1\0\4\3\1\0\2\3\1\17"+
    "\6\3\13\0\12\3\1\0\1\3\1\0\4\3\1\0"+
    "\6\3\1\50\2\3\13\0\12\3\1\0\1\3\1\0"+
    "\4\3\1\0\4\3\1\47\4\3\13\0\3\3\1\51"+
    "\6\3\1\0\1\3\1\0\4\3\1\0\11\3\47\0"+
    "\1\24\46\0\1\24\47\0\1\24\50\0\1\52\1\32"+
    "\1\53\44\0\1\33\1\0\43\54\1\55\2\54\1\0"+
    "\4\3\1\56\5\3\1\0\1\3\1\0\4\3\1\0"+
    "\11\3\13\0\11\3\1\57\1\0\1\3\1\0\4\3"+
    "\1\0\7\3\1\22\1\3\13\0\10\3\1\60\1\3"+
    "\1\0\1\3\1\0\4\3\1\0\11\3\13\0\12\3"+
    "\1\0\1\3\1\0\4\3\1\0\1\3\1\47\7\3"+
    "\13\0\2\3\1\61\7\3\1\0\1\3\1\0\4\3"+
    "\1\0\11\3\13\0\12\3\1\0\1\3\1\0\4\3"+
    "\1\0\3\3\1\47\5\3\13\0\12\3\1\0\1\3"+
    "\1\0\4\3\1\0\7\3\1\62\1\3\13\0\12\3"+
    "\1\0\1\3\1\0\4\3\1\0\7\3\1\63\1\3"+
    "\12\0\43\53\1\52\2\53\1\0\5\3\1\64\4\3"+
    "\1\0\1\3\1\0\4\3\1\0\11\3\13\0\5\3"+
    "\1\47\4\3\1\0\1\3\1\0\4\3\1\0\11\3"+
    "\13\0\11\3\1\56\1\0\1\3\1\0\4\3\1\0"+
    "\11\3\13\0\12\3\1\0\1\3\1\0\1\65\3\3"+
    "\1\0\11\3\13\0\10\3\1\57\1\3\1\0\1\3"+
    "\1\0\4\3\1\0\11\3\13\0\12\3\1\0\1\3"+
    "\1\0\4\3\1\0\1\46\10\3\13\0\12\3\1\0"+
    "\1\3\1\0\2\3\1\66\1\3\1\0\11\3\13\0"+
    "\12\3\1\0\1\3\1\0\3\3\1\67\1\0\11\3"+
    "\13\0\12\3\1\0\1\3\1\42\4\3\1\0\11\3"+
    "\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1634];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\21\1\1\11\4\1\1\11\7\1\1\0"+
    "\2\1\1\0\1\11\4\1\1\11\2\0\1\11\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[55];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
private Parser yyparser;

  public AnalizadorLexico(java.io.Reader r, Parser yyparser) {
    this(r);
    this.yyparser = yyparser;
  }
    
public int num_linea = 1; // numero de linea
public boolean es_inicio_linea = true; // nos dice si la linea esta empezando
public boolean necesita_identacion = false; // nos dice si la linea necesita indentacion
public int anterior = 0; // los espacios anteriores 
public Stack<Integer> espacios_bloque = new Stack<>(); // la pila de los espacios
public String salida = ""; // la cadena de salida del analizador

//inicializa la pila de la cantidad de espacios 
public void inicializa(){
    espacios_bloque.push(0);
}

// funcion que sale del programa pero primero escribe el archivo
public void  cerrar(){
    imprime();
    System.exit(0); 
}

//Funcion que verifica que la cadena este bien formada
public void VerificaCadena(String cadena){
    String cadena_aux = cadena.substring(1, cadena.length()-1); // hace una subcadena que empieza en 1 al final de la linea
    if(cadena_aux.contains("\"") || cadena.contains("\\")){ // verifica si la cadena tiene comillas o tiene una diagonal
        salida +=  "Error: Cadena mal Formada en la linea " + num_linea; // se le agrega mensaje de error a la salida 
        cerrar(); // se cierra e imprime la salida
    }else{
       salida += "CADENA(" + cadena_aux + ")"; // se acepta la cadena y sea grega el token a la salida
    }
}

//Funcion que imprime la salida en un archivo de texto
public void imprime(){
        try {
            BufferedWriter escritor = new BufferedWriter(new FileWriter("out/" + Parser.nombre_archivo + ".plx"));
            escritor.write(salida);
            escritor.flush();
        } catch (IOException ex) {
            System.err.println("No se ha podido abrir el archivo");
        }
}

//Funcion que cuenta los espacios y los saltos de linea
public void VerificaEspacios(String cadena){
    if(!necesita_identacion && cadena.length() > 1){ //verifica si necesita indentacion si no lo necesita manda error
        salida += "Error de identacion en la linea :" + num_linea;
        cerrar();
    }else{
        if(necesita_identacion && es_inicio_linea){ // si necesita identacion y la linea empieza checa la cantidad de espacios 
            int num_espacios = 0; // variable para el numero de espacoios
            cadena = cadena.substring(1,cadena.length()); // checamos la cadena y quitamos el primer caracter que es "\n"
            for(int i = 0 ; i < cadena.length() ; i++){ // contamos la cantidad de espacios de la cadena las cadenas que entran aqui son cadenas de puros espacios y tabuladores
                if(cadena.charAt(i) == ' '){
                    num_espacios++;
                }else{
                    num_espacios+=4; // los tabuladores se toman por 4 espacios
                }

            }
            /*
            * si el numero de espacios actual es menor que el anterior entonces checamos en la pila si existe ese numero de espacios si no existe mandamos error de indentacion si 
            * el numero si se encuentra extraemos de la pila y marcamos los deindenta  si al finalizar quedamos que el unico elemento en la pila es 0 entonces marcamos
            * necesita_indentacion como falso dado que para este punto es como si todos los bloques estuvieran cerrados
            *
            * Si el numero de espacios actual es mayor que el anterior (la parte del else) entonces metemos el numero a la pila y el colocamos en salida el indenta correspondietnte
            */
            if(num_espacios < anterior){ 
                int aux;
                boolean condicion = true;
                if(espacios_bloque.search(num_espacios)== -1){
                    salida += "Error de identacion en la linea :" + num_linea;
                    cerrar();
                }else{
                    while(condicion){
                        aux = espacios_bloque.pop();
                        salida += "DEINDENTA(" + aux + ")\n";
                        if (num_espacios == espacios_bloque.peek()){                            
                            condicion = false;
                            anterior = espacios_bloque.peek();
                            if(anterior == 0){
                              necesita_identacion = false;
                            }
                        }  
                    }
                }        
            }else{
                if(num_espacios > anterior){
                    espacios_bloque.push(num_espacios);
                    salida +="INDENTA(" + num_espacios + ")\n";
                    anterior = num_espacios;
                }
            }
            
        }
        
    }
}

// funcion que verifica si el inicio tiene identacion
public void VerificaEspaciosInicio(){
    if (es_inicio_linea){
        salida+= "Error de identacion en la linea :" + num_linea;
        cerrar();
    }
}

public int VerificaPalabra(String palabra){
    switch (palabra){
    case "and": return Parser.AND;
    case "or" : return Parser.OR;
    case "not": return Parser.NOT; 
    case "for": return Parser.FOR;
    case "while": return Parser.WHILE;
    case "if" : return Parser.IF;
    case "else": return Parser.ELSE;
    case "elif": return Parser.ELIF;
    case "print": return Parser.PRINT;
    default: return -1;
    
    }
}

public int VerificaOperador(String operador){
    switch(operador){
        case "+":
        case "-":
        case "*":
        case "/":
        case "=":
        case "%":
        case "<":
            return yycharat(0);
        case "**":
            return Parser.POW;
        case "//":
            return Parser.DIVISION_SUELO;
        case "<=":
            return Parser.MENOR_IGUAL;
        case ">=":
            return Parser.MAYOR_IGUAL;
        case "==":
            return Parser.IGUAL_IGUAL;
        case "!=":
            return Parser.DIFERENTE;
        default: return -1;



    }


}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AnalizadorLexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 124) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
        // Quita todos los espacios que quedaon el pila para que haga los deindenta
    boolean condicion = !espacios_bloque.isEmpty();
    int aux;
    while(condicion){
        aux = espacios_bloque.pop();    
        if (aux != 0){      
            salida += "\nDEINDENTA(" + aux + ")";
        }else{
            condicion = false;
        }
    }
  yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { salida+= "Error : palabra no encontrada en la linea " + num_linea; cerrar();
          }
        case 14: break;
        case 3: 
          { salida += "IDENTIFICADOR("+yytext() + ")"; es_inicio_linea = false; return(Parser.IDENTIFICADOR);
          }
        case 15: break;
        case 8: 
          { salida += "REAL("+yytext() + ")"; es_inicio_linea = false; return Parser.REAL;
          }
        case 16: break;
        case 10: 
          { salida += "PALABRA_RESERVADA("+yytext() + ")"; es_inicio_linea = false; return VerificaPalabra(yytext());
          }
        case 17: break;
        case 13: 
          { salida+="BOOLEANO("+yytext() + ")"; es_inicio_linea = false; return(Parser.BOOLEANO);
          }
        case 18: break;
        case 11: 
          { yypushback(1);num_linea++;
          }
        case 19: break;
        case 7: 
          { salida += "SALTO \n"; 
                es_inicio_linea = true;
                num_linea++;
                VerificaEspacios(yytext()); return Parser.SALTO;
          }
        case 20: break;
        case 4: 
          { salida += "ENTERO("+yytext() + ")"; es_inicio_linea = false; return Parser.ENTERO;
          }
        case 21: break;
        case 9: 
          { VerificaCadena(yytext()); es_inicio_linea = false; return Parser.CADENA;
          }
        case 22: break;
        case 5: 
          { salida+="OPERADOR("+yytext() + ")"; es_inicio_linea = false;return VerificaOperador(yytext());
          }
        case 23: break;
        case 1: 
          { VerificaEspaciosInicio();
          }
        case 24: break;
        case 12: 
          { yypushback(1);
          }
        case 25: break;
        case 6: 
          { salida+="SEPARADOR("+yytext() + ")";
                 es_inicio_linea = false; 
                 necesita_identacion = true;
                 return (int) yycharat(0);
          }
        case 26: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return 0; }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorLexico <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        AnalizadorLexico scanner = null;
        try {
          scanner = new AnalizadorLexico( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
